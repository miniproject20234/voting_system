const regUser = require("../model/regUser");
const jwt = require("jsonwebtoken");
const axios = require("axios");

// JWT token creation
const maxAge = 3 * 24 * 60 * 60; // 3 days in seconds
const createToken = (id) => {
  return jwt.sign({ id }, process.env.ACCESS_TOKEN, {
    expiresIn: maxAge,
  });
};

//register post method
module.exports.register_post = async (req, res) => {
  const { username, email, password, phonenumber, confirmPassword } = req.body;
  let errors = {};

  try {
    // Verify email using Hunter API
    const hunterApiKey = "bfd746001b26869f3839d939ea134f345d8c5c3b";
    const hunterApiUrl = `https://api.hunter.io/v2/email-verifier?email=${email}&api_key=${hunterApiKey}`;
    const emailVerificationResponse = await axios.get(hunterApiUrl);

    if (emailVerificationResponse.data.data.result !== "deliverable") {
      errors.email = "It is not a valid Email";
      return res.status(400).json({ errors });
    }

    // Create user
    const reguser = await regUser.create({
      username,
      email,
      password,
      phonenumber,
      confirmPassword,
    });
    const token = createToken(reguser._id);

    // console.log('Generated Token during Registration:', token);
    res.cookie("jwt", token, {
      httpOnly: true,
      maxAge: maxAge * 1000,
      sameSite: "None",
    });

    // Send the token in the response body as well
    res.status(201).json({ reguser: reguser._id, token });
  } catch (err) {
    if (err.code === 11000) {
      errors.email = "This email is already registered";
    } else if (err.message.includes("Reg_users validation failed")) {
      Object.values(err.errors).forEach(({ properties }) => {
        errors[properties.path] = properties.message;
      });
    }
    res.status(400).json({ errors });
  }
};


//login post method
module.exports.login_post = async (req, res) => {
  const { email, password } = req.body;
  let errors = {};

  try {
    const user = await regUser.login(email, password);
    const token = createToken(user._id);

    res.cookie("jwt", token, {
      httpOnly: true,
      maxAge: maxAge * 1000,
      sameSite: "None",
    });
    res.status(200).json({ user: user._id, token });
  } catch (err) {
    if (err.message === "incorrect email") {
      errors.email = "Email is not registered";
    } else if (err.message === "incorrect password") {
      errors.password = "Entered password is incorrect";
    } else {
      errors.general = "An unexpected error occurred";
    }
    res.status(400).json({ errors });
  }
};

// Retrieve user details by email
module.exports.getUserByEmail = async (req, res) => {
  const { email } = req.query;
  try {
    const user = await regUser.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.status(200).json({ user });
  } catch (err) {
    res.status(500).json({ message: "Server error" });
  }
};

// module.exports.google_login=async (req, res) => {
//   const { idToken } = req.body;

//   try {
//     const response = await axios.get(`https://oauth2.googleapis.com/tokeninfo?id_token=${idToken}`);
//     const { sub, email, name } = response.data;

//     let user = await User.findOne({ email });
//     if (!user) {
//       // Create a new user if not found
//       user = new User({ email, name });
//       await user.save();
//     }

//     // Generate a JWT token
//     const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

//     res.status(200).json({ token });
//   } catch (error) {
//     console.error('Error logging in with Google', error);
//     res.status(500).json({ error: 'Failed to authenticate with Google' });
//   }
// };
