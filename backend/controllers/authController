const regUser = require('../model/regUser');
const jwt = require('jsonwebtoken');
const axios = require('axios');

// JWT token creation
const maxAge = 3 * 24 * 60 * 60; // 3 days in seconds
const createToken = (id) => {
    
    return jwt.sign({ id }, process.env.ACCESS_TOKEN, {
        expiresIn: maxAge
    });
};


module.exports.register_post = async (req, res) => {
    const { username, email, password, phonenumber, confirmPassword } = req.body;
    let errors = {};

    try {
        // Verify email using Hunter API
        const hunterApiKey = "bfd746001b26869f3839d939ea134f345d8c5c3b"; 
        const hunterApiUrl = `https://api.hunter.io/v2/email-verifier?email=${email}&api_key=${hunterApiKey}`;
        const emailVerificationResponse = await axios.get(hunterApiUrl);

        if (emailVerificationResponse.data.data.result !== "deliverable") {
            errors.email = 'It is not a valid Email';
            return res.status(400).json({ errors });
        }

        // Create user
        const reguser = await regUser.create({ username, email, password, phonenumber, confirmPassword });
        const token = createToken(reguser._id);

        console.log('Generated Token during Registration:', token); // Debugging line
        res.cookie('jwt', token, { httpOnly: true, maxAge: maxAge * 1000 });
        res.status(201).json({ reguser: reguser._id });

    } catch (err) {
        if (err.code === 11000) {
            errors.email = 'This email is already registered';
        } else if (err.message.includes('Reg_users validation failed')) {
            Object.values(err.errors).forEach(({ properties }) => {
                errors[properties.path] = properties.message;
            });
        }
        res.status(400).json({ errors });
    }
};

module.exports.login_post = async (req, res) => {
    const { email, password } = req.body;
    let errors = {};

    try {
        const user = await regUser.login(email, password);
        const token = createToken(user._id);

        console.log('Generated Token during Login:', token); // Debugging line
        res.cookie('jwt', token, { httpOnly: true, maxAge: maxAge * 1000 });
        res.status(200).json({ user: user._id });

    } catch (err) {
        if (err.message === 'incorrect email') {
            errors.email = 'Email is not registered';
        } else if (err.message === 'incorrect password') {
            errors.password = 'Entered password is incorrect';
        } else {
            errors.general = 'An unexpected error occurred';
        }
        res.status(400).json({ errors });
    }
};


module.exports.logout_get = (req, res) => {
    res.cookie('jwt', '', { maxAge: 1 });
    res.status(200).json({ message: 'Logged out successfully' });
};
